// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetShopWebApplication.Data;

namespace PetShopWebApplication.Migrations
{
    [DbContext(typeof(AnimalsContext))]
    partial class AnimalsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PetShopWebApplication.Models.Animal", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int?>("CageID");

                    b.Property<int?>("ColorID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("Price");

                    b.Property<string>("Sex")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("ShopID");

                    b.Property<int>("SpeciesID");

                    b.HasKey("ID");

                    b.HasIndex("CageID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ShopID");

                    b.HasIndex("SpeciesID");

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Cage", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("Number");

                    b.Property<int>("ShopID");

                    b.Property<int>("Square");

                    b.HasKey("ID");

                    b.HasIndex("ShopID");

                    b.ToTable("Cage");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Color", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Food", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(35);

                    b.HasKey("ID");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Shop", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Species", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("LifeTime");

                    b.Property<string>("Name")
                        .HasMaxLength(35);

                    b.Property<int>("Temperature");

                    b.HasKey("ID");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.SpeciesFood", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("FoodID");

                    b.Property<int>("SpeciesID");

                    b.HasKey("ID");

                    b.HasIndex("FoodID");

                    b.HasIndex("SpeciesID");

                    b.ToTable("SpeciesFood");
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Animal", b =>
                {
                    b.HasOne("PetShopWebApplication.Models.Cage", "Cage")
                        .WithMany()
                        .HasForeignKey("CageID");

                    b.HasOne("PetShopWebApplication.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorID");

                    b.HasOne("PetShopWebApplication.Models.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PetShopWebApplication.Models.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetShopWebApplication.Models.Cage", b =>
                {
                    b.HasOne("PetShopWebApplication.Models.Shop", "Shop")
                        .WithMany("Cages")
                        .HasForeignKey("ShopID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetShopWebApplication.Models.SpeciesFood", b =>
                {
                    b.HasOne("PetShopWebApplication.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetShopWebApplication.Models.Species", "Species")
                        .WithMany("SpeciesFood")
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
